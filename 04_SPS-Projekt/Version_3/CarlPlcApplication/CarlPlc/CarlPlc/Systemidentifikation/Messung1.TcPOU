<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="Messung1" Id="{23361215-bda4-4897-81af-964a5b46021b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Messung1
VAR
	//PWM Settings
	pwmPeriodinSec			: TIME 	:= T#25S;
	pwmDutyCycle			: REAL 	:= 0.0;	
	pwmOutputValveControl 	: FB_PWM;
	status 					: INT 	:= 0; 			//Status 0 : Initial 
													//Status 1 : Heating to Startpoint
													//Status 2 : Heating while recording
													//Status 3 : Cooling while recording
													//STatus is set manuelly
													
END_VAR


(*Temperature should be increased to a value in a first step. 
This is to serve as a 0 point. In the second step, the duty cycle is increased and the step response is recorded.  
The container is then closed. The same duty cycle is used.
Finally, the water is cooled with a DutyCycle of ... .
*)
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* jacket temperature input *)
jacketTempC := INT_TO_REAL(jacketTempRaw)/32768.0*200.0 -50.0;
(* room temperature input *) //Is not in use in TemperaturControl
roomTemp := (INT_TO_REAL(roomTempRaw)/32767.0)*100.0 - 40.0;  (* Sensor Range: -40°C to + 60°C *)



// DutyCycle - To get a startingTemp.
CASE status OF
	
	//------Initial - Status 0----------//
	0:
	(* Setting Valves & Pump off  *)
	pumpOn := FALSE;
	coldValve := FALSE;
	hotValve := FALSE;
	steriValve := FALSE;
	
	//------HEATING - Status 1----------//
	1:
	//Starting pump
	pumpOn := TRUE;
	
	//DutyCyle for startpoint
	pwmDutyCycle:= 20 ;
	pwmOutputValveControl(pwmCycleTime:=pwmPeriodinSec, pwmDutyCycle:=pwmDutyCycle); //Gets the Output
	hotValve := pwmOutputValveControl.Q;
	
	
	//------HEATING - Status 2----------//
	2:	
	//DutyCycle for step response
	pwmDutyCycle:= 40 ;
	pwmOutputValveControl(pwmCycleTime:=pwmPeriodinSec, pwmDutyCycle:=pwmDutyCycle); //Gets the Output
	hotValve := pwmOutputValveControl.Q;
	
	//------COOLING - Status 3----------//
	3:
	//Turning off hotValve
	hotValve := FALSE;
	
	//DutyCycle for cooling
	pwmDutyCycle:= 40 ;
	pwmOutputValveControl(pwmCycleTime:=pwmPeriodinSec, pwmDutyCycle:=pwmDutyCycle); //Gets the Output
	coldValve := pwmOutputValveControl.Q;
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="Messung1">
      <LineId Id="10" Count="1" />
      <LineId Id="31" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="82" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="104" Count="4" />
      <LineId Id="130" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="110" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="91" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="88" Count="0" />
      <LineId Id="96" Count="2" />
      <LineId Id="120" Count="1" />
      <LineId Id="129" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="119" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>